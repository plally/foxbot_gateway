// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoxbotGatewayClient is the client API for FoxbotGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoxbotGatewayClient interface {
	PersistRole(ctx context.Context, in *PersistRoleData, opts ...grpc.CallOption) (*Empty, error)
	UnpersistRole(ctx context.Context, in *UnpersistRoleData, opts ...grpc.CallOption) (*Empty, error)
}

type foxbotGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewFoxbotGatewayClient(cc grpc.ClientConnInterface) FoxbotGatewayClient {
	return &foxbotGatewayClient{cc}
}

func (c *foxbotGatewayClient) PersistRole(ctx context.Context, in *PersistRoleData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/FoxbotGateway/PersistRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foxbotGatewayClient) UnpersistRole(ctx context.Context, in *UnpersistRoleData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/FoxbotGateway/UnpersistRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoxbotGatewayServer is the server API for FoxbotGateway service.
// All implementations must embed UnimplementedFoxbotGatewayServer
// for forward compatibility
type FoxbotGatewayServer interface {
	PersistRole(context.Context, *PersistRoleData) (*Empty, error)
	UnpersistRole(context.Context, *UnpersistRoleData) (*Empty, error)
	mustEmbedUnimplementedFoxbotGatewayServer()
}

// UnimplementedFoxbotGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedFoxbotGatewayServer struct {
}

func (UnimplementedFoxbotGatewayServer) PersistRole(context.Context, *PersistRoleData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistRole not implemented")
}
func (UnimplementedFoxbotGatewayServer) UnpersistRole(context.Context, *UnpersistRoleData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpersistRole not implemented")
}
func (UnimplementedFoxbotGatewayServer) mustEmbedUnimplementedFoxbotGatewayServer() {}

// UnsafeFoxbotGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoxbotGatewayServer will
// result in compilation errors.
type UnsafeFoxbotGatewayServer interface {
	mustEmbedUnimplementedFoxbotGatewayServer()
}

func RegisterFoxbotGatewayServer(s grpc.ServiceRegistrar, srv FoxbotGatewayServer) {
	s.RegisterService(&FoxbotGateway_ServiceDesc, srv)
}

func _FoxbotGateway_PersistRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistRoleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoxbotGatewayServer).PersistRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FoxbotGateway/PersistRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoxbotGatewayServer).PersistRole(ctx, req.(*PersistRoleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoxbotGateway_UnpersistRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpersistRoleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoxbotGatewayServer).UnpersistRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FoxbotGateway/UnpersistRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoxbotGatewayServer).UnpersistRole(ctx, req.(*UnpersistRoleData))
	}
	return interceptor(ctx, in, info, handler)
}

// FoxbotGateway_ServiceDesc is the grpc.ServiceDesc for FoxbotGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoxbotGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FoxbotGateway",
	HandlerType: (*FoxbotGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PersistRole",
			Handler:    _FoxbotGateway_PersistRole_Handler,
		},
		{
			MethodName: "UnpersistRole",
			Handler:    _FoxbotGateway_UnpersistRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/foxbot_gateway.proto",
}
